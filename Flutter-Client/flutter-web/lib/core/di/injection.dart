import 'package:dio/dio.dart';
import 'package:get_it/get_it.dart';
import 'package:injectable/injectable.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../constants/app_constants.dart';
import '../../data/datasources/download_api_client.dart';
import '../../data/datasources/download_websocket_client.dart';
import '../../data/repositories/download_repository_impl.dart';
import '../../domain/repositories/download_repository.dart';
import '../../presentation/bloc/download_bloc.dart';

final getIt = GetIt.instance;

@InjectableInit()
Future<void> configureDependencies() async {
  // Register SharedPreferences
  final sharedPreferences = await SharedPreferences.getInstance();
  getIt.registerSingleton<SharedPreferences>(sharedPreferences);

  // Register Dio
  final dio = Dio(BaseOptions(
    baseUrl: AppConstants.defaultServerUrl,
    connectTimeout: const Duration(seconds: 10),
    receiveTimeout: const Duration(seconds: 30),
    headers: {
      'Content-Type': 'application/json',
      'Accept': 'application/json',
    },
  ));
  getIt.registerSingleton<Dio>(dio);

  // Register API Client
  final apiClient = DownloadApiClient(dio, baseUrl: AppConstants.defaultServerUrl);
  getIt.registerSingleton<DownloadApiClient>(apiClient);

  // Register WebSocket Client
  final wsClient = DownloadWebSocketClient(serverUrl: AppConstants.defaultServerUrl);
  getIt.registerSingleton<DownloadWebSocketClient>(wsClient);

  // Register Repository
  final repository = DownloadRepositoryImpl(apiClient, wsClient);
  getIt.registerSingleton<DownloadRepository>(repository);

  // Register BLoC
  getIt.registerFactory<DownloadBloc>(() => DownloadBloc(getIt<DownloadRepository>()));

  // Initialize injectable dependencies (if any)
  // This will be generated by build_runner
  // Run: flutter pub run build_runner build
  // getIt.init();
}
