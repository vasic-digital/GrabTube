// Mocks generated by Mockito 5.4.4 from annotations
// in grabtube/test/integration/scheduling_integration_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:grabtube/domain/entities/download.dart' as _i2;
import 'package:grabtube/domain/entities/video_info.dart' as _i3;
import 'package:grabtube/domain/repositories/download_repository.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDownload_0 extends _i1.SmartFake implements _i2.Download {
  _FakeDownload_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeVideoInfo_1 extends _i1.SmartFake implements _i3.VideoInfo {
  _FakeVideoInfo_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DownloadRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDownloadRepository extends _i1.Mock
    implements _i4.DownloadRepository {
  MockDownloadRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Stream<_i2.Download> get downloadUpdates => (super.noSuchMethod(
        Invocation.getter(#downloadUpdates),
        returnValue: _i5.Stream<_i2.Download>.empty(),
      ) as _i5.Stream<_i2.Download>);

  @override
  _i5.Stream<_i2.Download> get newDownloads => (super.noSuchMethod(
        Invocation.getter(#newDownloads),
        returnValue: _i5.Stream<_i2.Download>.empty(),
      ) as _i5.Stream<_i2.Download>);

  @override
  _i5.Stream<_i2.Download> get completedDownloads => (super.noSuchMethod(
        Invocation.getter(#completedDownloads),
        returnValue: _i5.Stream<_i2.Download>.empty(),
      ) as _i5.Stream<_i2.Download>);

  @override
  _i5.Stream<String> get canceledDownloads => (super.noSuchMethod(
        Invocation.getter(#canceledDownloads),
        returnValue: _i5.Stream<String>.empty(),
      ) as _i5.Stream<String>);

  @override
  _i5.Stream<bool> get connectionStatus => (super.noSuchMethod(
        Invocation.getter(#connectionStatus),
        returnValue: _i5.Stream<bool>.empty(),
      ) as _i5.Stream<bool>);

  @override
  _i5.Future<_i2.Download> addDownload({
    required String? url,
    String? quality,
    String? format,
    String? folder,
    bool? autoStart,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #addDownload,
          [],
          {
            #url: url,
            #quality: quality,
            #format: format,
            #folder: folder,
            #autoStart: autoStart,
          },
        ),
        returnValue: _i5.Future<_i2.Download>.value(_FakeDownload_0(
          this,
          Invocation.method(
            #addDownload,
            [],
            {
              #url: url,
              #quality: quality,
              #format: format,
              #folder: folder,
              #autoStart: autoStart,
            },
          ),
        )),
      ) as _i5.Future<_i2.Download>);

  @override
  _i5.Future<List<_i2.Download>> getDownloads() => (super.noSuchMethod(
        Invocation.method(
          #getDownloads,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Download>>.value(<_i2.Download>[]),
      ) as _i5.Future<List<_i2.Download>>);

  @override
  _i5.Future<List<_i2.Download>> getQueue() => (super.noSuchMethod(
        Invocation.method(
          #getQueue,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Download>>.value(<_i2.Download>[]),
      ) as _i5.Future<List<_i2.Download>>);

  @override
  _i5.Future<List<_i2.Download>> getCompleted() => (super.noSuchMethod(
        Invocation.method(
          #getCompleted,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Download>>.value(<_i2.Download>[]),
      ) as _i5.Future<List<_i2.Download>>);

  @override
  _i5.Future<List<_i2.Download>> getPending() => (super.noSuchMethod(
        Invocation.method(
          #getPending,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Download>>.value(<_i2.Download>[]),
      ) as _i5.Future<List<_i2.Download>>);

  @override
  _i5.Future<void> deleteDownload({
    required List<String>? ids,
    String? where = r'queue',
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteDownload,
          [],
          {
            #ids: ids,
            #where: where,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> startDownload({required List<String>? ids}) =>
      (super.noSuchMethod(
        Invocation.method(
          #startDownload,
          [],
          {#ids: ids},
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<List<_i2.Download>> getHistory() => (super.noSuchMethod(
        Invocation.method(
          #getHistory,
          [],
        ),
        returnValue: _i5.Future<List<_i2.Download>>.value(<_i2.Download>[]),
      ) as _i5.Future<List<_i2.Download>>);

  @override
  _i5.Future<void> redownload({
    required String? url,
    String? quality,
    String? format,
    String? folder,
    bool? autoStart,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #redownload,
          [],
          {
            #url: url,
            #quality: quality,
            #format: format,
            #folder: folder,
            #autoStart: autoStart,
          },
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<void> clearCompleted() => (super.noSuchMethod(
        Invocation.method(
          #clearCompleted,
          [],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<_i3.VideoInfo> getVideoInfo({required String? url}) =>
      (super.noSuchMethod(
        Invocation.method(
          #getVideoInfo,
          [],
          {#url: url},
        ),
        returnValue: _i5.Future<_i3.VideoInfo>.value(_FakeVideoInfo_1(
          this,
          Invocation.method(
            #getVideoInfo,
            [],
            {#url: url},
          ),
        )),
      ) as _i5.Future<_i3.VideoInfo>);

  @override
  _i5.Future<bool> checkHealth() => (super.noSuchMethod(
        Invocation.method(
          #checkHealth,
          [],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);

  @override
  _i5.Future<void> toggleFavorite(String? downloadId) => (super.noSuchMethod(
        Invocation.method(
          #toggleFavorite,
          [downloadId],
        ),
        returnValue: _i5.Future<void>.value(),
        returnValueForMissingStub: _i5.Future<void>.value(),
      ) as _i5.Future<void>);

  @override
  _i5.Future<bool> isFavorite(String? downloadId) => (super.noSuchMethod(
        Invocation.method(
          #isFavorite,
          [downloadId],
        ),
        returnValue: _i5.Future<bool>.value(false),
      ) as _i5.Future<bool>);
}
