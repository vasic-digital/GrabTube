// Mocks generated by Mockito 5.4.4 from annotations
// in grabtube/test/unit/data/repositories/search_repository_impl_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:grabtube/domain/entities/download.dart' as _i2;
import 'package:grabtube/domain/repositories/download_repository.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDownload_0 extends _i1.SmartFake implements _i2.Download {
  _FakeDownload_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DownloadRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockDownloadRepository extends _i1.Mock implements _i3.DownloadRepository {
  MockDownloadRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<_i2.Download> get downloads => (super.noSuchMethod(
        Invocation.getter(#downloads),
        returnValue: <_i2.Download>[],
      ) as List<_i2.Download>);

  @override
  Future<List<_i2.Download>> getAllDownloads() => (super.noSuchMethod(
        Invocation.method(
          #getAllDownloads,
          [],
        ),
        returnValue: Future<List<_i2.Download>>.value(<_i2.Download>[]),
      ) as Future<List<_i2.Download>>);

  @override
  Future<void> addDownload(_i2.Download? download) => (super.noSuchMethod(
        Invocation.method(
          #addDownload,
          [download],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);

  @override
  Future<void> updateDownload(_i2.Download? download) => (super.noSuchMethod(
        Invocation.method(
          #updateDownload,
          [download],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);

  @override
  Future<void> deleteDownload(String? id) => (super.noSuchMethod(
        Invocation.method(
          #deleteDownload,
          [id],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);

  @override
  Future<void> toggleFavorite(String? id) => (super.noSuchMethod(
        Invocation.method(
          #toggleFavorite,
          [id],
        ),
        returnValue: Future<void>.value(),
        returnValueForMissingStub: Future<void>.value(),
      ) as Future<void>);

  @override
  Stream<List<_i2.Download>> observeDownloads() => (super.noSuchMethod(
        Invocation.method(
          #observeDownloads,
          [],
        ),
        returnValue: Stream<List<_i2.Download>>.empty(),
      ) as Stream<List<_i2.Download>>);

  @override
  Stream<List<_i2.Download>> observeFavorites() => (super.noSuchMethod(
        Invocation.method(
          #observeFavorites,
          [],
        ),
        returnValue: Stream<List<_i2.Download>>.empty(),
      ) as Stream<List<_i2.Download>>);
}