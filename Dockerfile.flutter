# Multi-stage Dockerfile for GrabTube with Flutter Web support
# Builds both Angular and Flutter Web frontends, then serves with Python backend

# Stage 1: Build Flutter Web
FROM debian:bookworm-slim AS flutter-builder

# Install Flutter dependencies
RUN apt-get update && apt-get install -y \
    curl \
    git \
    unzip \
    xz-utils \
    zip \
    libglu1-mesa \
    && rm -rf /var/lib/apt/lists/*

# Install Flutter
ENV FLUTTER_VERSION=3.24.0
ENV FLUTTER_HOME=/usr/local/flutter
ENV PATH="$FLUTTER_HOME/bin:$PATH"

RUN git clone --branch ${FLUTTER_VERSION} --depth 1 https://github.com/flutter/flutter.git ${FLUTTER_HOME}

# Pre-download Flutter artifacts
RUN flutter precache --web

# Set working directory
WORKDIR /build

# Copy Flutter Web source
COPY flutter-web/pubspec.yaml flutter-web/pubspec.lock ./
RUN flutter pub get

COPY flutter-web/ ./

# Build Flutter Web
RUN flutter build web --release --web-renderer html

# Stage 2: Build Angular (existing)
FROM node:18-alpine AS angular-builder

WORKDIR /build

COPY ui/package.json ui/package-lock.json ./
RUN npm ci

COPY ui/ ./
RUN npm run build

# Stage 3: Python Runtime
FROM python:3.13-slim

LABEL org.opencontainers.image.source="https://github.com/yourusername/grabtube"
LABEL org.opencontainers.image.description="GrabTube - Video downloader with dual frontends"

# Install runtime dependencies
RUN apt-get update && apt-get install -y \
    ffmpeg \
    && rm -rf /var/lib/apt/lists/*

# Create app user
RUN useradd -m -u 1000 app

# Set working directory
WORKDIR /app

# Install Python dependencies
COPY requirements.txt ./
RUN pip install --no-cache-dir -r requirements.txt

# Copy Python backend
COPY app/ ./app/

# Copy Angular build
COPY --from=angular-builder /build/dist/metube/browser ./app/static/angular/

# Copy Flutter Web build
COPY --from=flutter-builder /build/build/web ./app/static/flutter-web/

# Create downloads directory
RUN mkdir -p /downloads && chown app:app /downloads

# Switch to app user
USER app

# Expose port
EXPOSE 8081

# Environment variables
ENV DOWNLOAD_DIR=/downloads
ENV STATE_DIR=/downloads/.metube
ENV TEMP_DIR=/downloads
ENV PYTHONUNBUFFERED=1

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD python3 -c "import urllib.request; urllib.request.urlopen('http://localhost:8081/health')"

# Start server
CMD ["python3", "app/main.py"]
